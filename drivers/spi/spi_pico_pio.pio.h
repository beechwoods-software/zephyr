// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// spi_mode_0_0 //
// ------------ //

#define spi_mode_0_0_wrap_target 0
#define spi_mode_0_0_wrap 1

static const uint16_t spi_mode_0_0_program_instructions[] = {
            //     .wrap_target
    0x6101, //  0: out    pins, 1         side 0 [1] 
    0x5101, //  1: in     pins, 1         side 1 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spi_mode_0_0_program = {
    .instructions = spi_mode_0_0_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config spi_mode_0_0_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_mode_0_0_wrap_target, offset + spi_mode_0_0_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// ------------ //
// spi_mode_1_1 //
// ------------ //

#define spi_mode_1_1_wrap_target 0
#define spi_mode_1_1_wrap 2

static const uint16_t spi_mode_1_1_program_instructions[] = {
            //     .wrap_target
    0x7021, //  0: out    x, 1            side 1     
    0xa101, //  1: mov    pins, x         side 0 [1] 
    0x5001, //  2: in     pins, 1         side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spi_mode_1_1_program = {
    .instructions = spi_mode_1_1_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config spi_mode_1_1_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_mode_1_1_wrap_target, offset + spi_mode_1_1_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// ------------------- //
// spi_sio_mode_0_0_tx //
// ------------------- //

#define spi_sio_mode_0_0_tx_wrap_target 0
#define spi_sio_mode_0_0_tx_wrap 2

static const uint16_t spi_sio_mode_0_0_tx_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block           side 0     
    0x6101, //  1: out    pins, 1         side 0 [1] 
    0x11e1, //  2: jmp    !osre, 1        side 1 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spi_sio_mode_0_0_tx_program = {
    .instructions = spi_sio_mode_0_0_tx_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config spi_sio_mode_0_0_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_sio_mode_0_0_tx_wrap_target, offset + spi_sio_mode_0_0_tx_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// ------------------- //
// spi_sio_mode_0_0_rx //
// ------------------- //

#define spi_sio_mode_0_0_rx_wrap_target 0
#define spi_sio_mode_0_0_rx_wrap 6

static const uint16_t spi_sio_mode_0_0_rx_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block           side 0     
    0x6040, //  1: out    y, 32           side 0     
    0xb142, //  2: nop                    side 1 [1] 
    0x4001, //  3: in     pins, 1         side 0     
    0x0082, //  4: jmp    y--, 2          side 0     
    0x8020, //  5: push   block           side 0     
    0x0040, //  6: jmp    x--, 0          side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spi_sio_mode_0_0_rx_program = {
    .instructions = spi_sio_mode_0_0_rx_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config spi_sio_mode_0_0_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_sio_mode_0_0_rx_wrap_target, offset + spi_sio_mode_0_0_rx_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

